from PIL import Image
import glob
import numpy as np
import matplotlib.pyplot as plt
import bisect
# from numpy import linalg as LA
from scipy import linalg as LA


def mean_normalize_column(A, col):
    if (np.std(A[:, col])):
        A[:, col] = (A[:, col] - np.mean(A[:, col]))  # / (np.std(A[:,col]))
    else:
        A[:, col] = (A[:, col] - np.mean(A[:, col]))


def main():
    # iterate thru each file and get image matrix
    img_matrix = []
    for filename in glob.glob('yalefaces/*.*'):
        im = Image.open(filename).convert('L')
        # img_as_np = np.asarray(im)
        pixels = list(im.getdata())
        width, height = im.size
        pixels = [pixels[i * width:(i + 1) * width] for i in range(height)]
        img_as_np = np.array(pixels)
        # plt.imshow(img_as_np, cmap='gray')
        # plt.title('Image')
        # plt.show()

        img_as_np = img_as_np.flatten()
        img_matrix.append(img_as_np)

    img_matrix = np.array(img_matrix)
    img_matrix = img_matrix.T
    print(img_matrix.shape)

    # 1. Mean normalization
    mean_array = []
    '''
    for col in range(img_matrix.shape[1]):
        col_mean = np.mean(img_matrix[:,col])
        mean_array.append(col_mean)
        img_matrix[:,col] = img_matrix[:,col] - col_mean
    '''
    for row in range(img_matrix.shape[0]):
        row_mean = np.mean(img_matrix[row, :])
        mean_array.append(row_mean)
        img_matrix[row, :] = img_matrix[row, :] - row_mean

    mean_array = np.array(mean_array)
    mean_mat = mean_array.reshape(243, 320)
    plt.imshow(mean_mat, cmap='gray')
    plt.title('Mean Image')
    plt.show()

    # 2. Compute Covariance Matrix
    N = img_matrix.shape[1]
    print(N)
    img_cov_matrix = (np.dot(img_matrix.T, img_matrix)) / N
    print(img_cov_matrix.shape)

    # 3. Eigenvalues and Eigenvectors
    eig_vals, eig_vecs = np.linalg.eigh(img_cov_matrix)
    eig_vecs = [eig_vecs for _, eig_vecs in sorted(zip(eig_vals, eig_vecs), reverse=True)]
    eig_vals = sorted(eig_vals, reverse=True)

    plt.plot(eig_vals)
    plt.title("EigenValues")
    plt.show()

    total_sum = np.sum(eig_vals)
    eig_vals_mean = np.cumsum(eig_vals) / total_sum
    print(eig_vals_mean)

    eig_vecs = np.array(eig_vecs)
    print(eig_vecs.shape)

    # for col in range(eig_vecs.shape[1]):
    #    mean_normalize_column(eig_vecs, col)

    # print(eig_vecs.shape)
    for x in range(0, 10):
        im_arr = np.dot(eig_vecs[x, :], img_matrix.T)
        im_arr += mean_array
        # for col in range(im_arr.shape[0]):
        #   im_arr[col,:] = (im_arr[col,:] - np.mean(im_arr[col,:])) / (np.std(im_arr[col,:]))
        im_arr = np.array(im_arr)
        print(im_arr.shape)
        # im_arr = im_arr*255
        im_mat = im_arr.reshape(243, 320)
        plt.imshow(im_mat, cmap='gray')
        plt.title('Eigen Face')
        plt.show()

    red_eig_vecs = eig_vecs[0:100, :]

    proj_mat = np.dot(red_eig_vecs.T, red_eig_vecs)
    reconstruct_img_mat = np.dot(img_matrix, proj_mat)
    print(reconstruct_img_mat.shape)

    for x in range(reconstruct_img_mat.shape[1]):
        im_arr = np.array(reconstruct_img_mat[:, x])
        im_arr = im_arr + mean_array
        im_mat = im_arr.reshape(243, 320)
        plt.imshow(im_mat, cmap='gray')
        plt.title('Reconstructed Face')
        plt.show()


        # print(eig_vals.shape)
        # U, S, V = np.linalg.svd(img_cov_matrix)


main()